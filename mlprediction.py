# -*- coding: utf-8 -*-
"""MLPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17R1G736lMjsQiZPC3i9BvTOj1niMdjf1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

def plot_confusion_matrix(y,y_predict):
    "this function plots the confusion matrix"
    from sklearn.metrics import confusion_matrix

    cm = confusion_matrix(y, y_predict)
    ax= plt.subplot()
    sns.heatmap(cm, annot=True, ax = ax); #annot=True to annotate cells
    ax.set_xlabel('Predicted labels')
    ax.set_ylabel('True labels')
    ax.set_title('Confusion Matrix');
    ax.xaxis.set_ticklabels(['did not land', 'land']); ax.yaxis.set_ticklabels(['did not land', 'landed'])
    plt.show()

import requests
import io

URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
response = requests.get(URL)

# Read into pandas DataFrame
df = pd.read_csv(io.StringIO(response.text))

# Display first few rows
df.head()

df.head()

from js import fetch
import io
URL2 = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_3.csv'
resp2 = await fetch(URL2)
text2 = io.BytesIO((await resp2.arrayBuffer()).to_py())
X = pd.read_csv(text2)

# Dataset URL
URL2 = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_3.csv'

# Fetch and load into DataFrame
response = requests.get(URL2)
X = pd.read_csv(io.StringIO(response.text))

# Preview the DataFrame
X.head()

Y=df['Class'].to_numpy()

transform = preprocessing.StandardScaler()
X= transform.fit_transform(X)

X_train, X_test, Y_train,Y_test= train_test_split(X,Y, test_size=0.2, random_state=2)

Y_test.shape

parameters ={'C':[0.01,0.1,1],
             'penalty':['l2'],
             'solver':['lbfgs']}

parameters ={"C":[0.01,0.1,1],'penalty':['l2'], 'solver':['lbfgs']}
lr=LogisticRegression()

from sklearn.model_selection import GridSearchCV
grid = GridSearchCV(lr, parameters, cv=5)
grid.fit(X_train, Y_train)

print("tuned hpyerparameters :(best parameters) ",grid.best_params_)
print("accuracy :",grid.best_score_)

# Accuracy on the test set
test_accuracy = grid.score(X_test, Y_test)
print("Test Accuracy:", test_accuracy)

yhat=grid.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

parameters = {'kernel':('linear', 'rbf','poly','rbf', 'sigmoid'),
              'C': np.logspace(-3, 3, 5),
              'gamma':np.logspace(-3, 3, 5)}
svm = SVC()

# GridSearchCV with 5-fold cross-validation
svm_cv = GridSearchCV(svm, parameters, cv=5)

# Fit to training data
svm_cv.fit(X_train, Y_train)

print("tuned hpyerparameters :(best parameters) ",svm_cv.best_params_)
print("accuracy :",svm_cv.best_score_)

# Accuracy on the test data
test_accuracy = svm_cv.score(X_test,Y_test)
print("Test Accuracy:", test_accuracy)

yhat=svm_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

parameters = {'criterion': ['gini', 'entropy'],
     'splitter': ['best', 'random'],
     'max_depth': [2*n for n in range(1,10)],
     'max_features': ['auto', 'sqrt'],
     'min_samples_leaf': [1, 2, 4],
     'min_samples_split': [2, 5, 10]}

tree = DecisionTreeClassifier()

# Create GridSearchCV object
tree_cv = GridSearchCV(estimator=tree, param_grid=parameters, cv=5)

# Fit to training data
tree_cv.fit(X_train, Y_train)

print("tuned hpyerparameters :(best parameters) ",tree_cv.best_params_)
print("accuracy :",tree_cv.best_score_)

test_accuracy = tree_cv.score(X_test, Y_test)
print("Test Accuracy:", test_accuracy)

yhat = tree_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

# Define hyperparameter grid
parameters = {
    'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'],
    'p': [1, 2]  # 1 = Manhattan distance, 2 = Euclidean distance
}

# Instantiate the model
KNN = KNeighborsClassifier()

# GridSearchCV with 5-fold cross-validation
knn_cv = GridSearchCV(KNN, parameters, cv=5)

# Fit on training data
knn_cv.fit(X_train, Y_train)

# Print best parameters and accuracy
print("Tuned hyperparameters (best parameters):", knn_cv.best_params_)
print("Cross-validation accuracy:", knn_cv.best_score_)

# Accuracy on the test set
test_accuracy = knn_cv.score(X_test, Y_test)
print("Test Accuracy:", test_accuracy)

yhat = knn_cv.predict(X_test)
plot_confusion_matrix(Y_test,yhat)

# Store accuracies
accuracies = {
    'Logistic Regression': grid.score(X_test, Y_test),
    'SVM': svm_cv.score(X_test, Y_test),
    'Decision Tree': tree_cv.score(X_test, Y_test),
    'KNN': knn_cv.score(X_test, Y_test)
}

# Find the best model
best_model = max(accuracies, key=accuracies.get)

print(f"\nüèÜ Best Performing Model: {best_model} with Accuracy = {accuracies[best_model]:.4f}")

